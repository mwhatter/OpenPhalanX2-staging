#!/bin/bash

# Detect the original user's home directory
if [ -n "$SUDO_USER" ]; then
    USER_HOME=$(eval echo "~$SUDO_USER")
else
    USER_HOME="$HOME"
fi

# Define the project root directory
PROJECT_ROOT="$USER_HOME/CyberConnect"

# Function to check if a command is available
command_exists() {
    command -v "$1" &> /dev/null
}

# Update and upgrade system
echo "Updating system..."
apt update && apt upgrade -y

# Install base utilities
echo "Installing essential utilities..."
apt install -y curl wget git build-essential software-properties-common apt-transport-https ca-certificates gnupg

# Install Python if not already installed
if ! command_exists python3; then
    echo "Installing Python and Pip..."
    apt install -y python3 python3-pip python3-venv
else
    echo "Python is already installed"
fi

# Install Go (for Aranya)
if ! command_exists go; then
    echo "Installing Go..."
    if [ ! -f "$PROJECT_ROOT/go1.20.3.linux-amd64.tar.gz" ]; then
        wget -P "$PROJECT_ROOT" https://go.dev/dl/go1.20.3.linux-amd64.tar.gz
    fi
    tar -C /usr/local -xzf "$PROJECT_ROOT/go1.20.3.linux-amd64.tar.gz"
    rm "$PROJECT_ROOT/go1.20.3.linux-amd64.tar.gz"

    # Set up Go environment
    echo "Configuring Go environment variables..."
    echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.profile
    echo "export GOPATH=$USER_HOME/go" >> ~/.profile
    source ~/.profile
else
    echo "Go is already installed"
fi

# Verify Go installation
go version

# Install Rust (for Aranya)
if ! command_exists rustc; then
    echo "Installing Rust..."
    if [ ! -f "$USER_HOME/.cargo/env" ]; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    fi
    source "$USER_HOME/.cargo/env"
else
    echo "Rust is already installed"
fi

# Verify Rust installation
rustc --version
cargo --version

# Install Node.js (for ActivityPods)
if ! command_exists node; then
    echo "Installing Node.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt install -y nodejs
else
    echo "Node.js is already installed"
fi

node -v
npm -v

# Install PostgreSQL if not already installed
if ! command_exists psql; then
    echo "Installing PostgreSQL..."
    apt install -y postgresql postgresql-contrib

    # Start and enable PostgreSQL service
    echo "Starting PostgreSQL service..."
    systemctl start postgresql
    systemctl enable postgresql

    # Configure PostgreSQL user and database
    echo "Configuring PostgreSQL user and database..."
    sudo -i -u postgres psql << EOF
CREATE USER kong WITH PASSWORD 'your_password';
ALTER ROLE kong SET client_encoding TO 'utf8';
ALTER ROLE kong SET default_transaction_isolation TO 'read committed';
ALTER ROLE kong SET timezone TO 'UTC';
CREATE DATABASE kong;
GRANT ALL PRIVILEGES ON DATABASE kong TO kong;
\q
EOF
else
    echo "PostgreSQL is already installed"
fi

# Install Kong Gateway
if ! command_exists kong; then
    echo "Installing Kong Gateway..."
    if [ ! -f "$PROJECT_ROOT/kong-3.8.0.deb" ]; then
        curl -Lo "$PROJECT_ROOT/kong-3.8.0.deb" "https://packages.konghq.com/public/gateway-38/deb/debian/pool/bullseye/main/k/ko/kong_3.8.0/kong_3.8.0_$(dpkg --print-architecture).deb"
    fi
    apt install -y "$PROJECT_ROOT/kong-3.8.0.deb"
    rm "$PROJECT_ROOT/kong-3.8.0.deb"

    # Bootstrap Kong database
    echo "Setting up Kong database..."
    kong migrations bootstrap -c /etc/kong/kong.conf || echo "Kong migrations have already been bootstrapped"
else
    echo "Kong is already installed"
fi

# Start Kong only if not running
if ! pgrep kong &> /dev/null; then
    echo "Starting Kong..."
    kong start -c /etc/kong/kong.conf
else
    echo "Kong is already running"
fi

# Install Docker if not already installed
if ! command_exists docker; then
    echo "Installing Docker..."
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    # Enable Docker service
    systemctl enable docker
    systemctl start docker
else
    echo "Docker is already installed"
fi

# Install Redis for Celery Task Queue
if ! command_exists redis-server; then
    echo "Installing Redis..."
    apt install -y redis-server
    systemctl enable redis-server
    systemctl start redis-server
else
    echo "Redis is already installed"
fi

# Set up CyberConnect project structure
echo "Setting up CyberConnect project structure..."
mkdir -p "$PROJECT_ROOT"/{config/{kong,postgres,aranya},core,services/{intelligence_exchange,collaboration,marketplace},data,infrastructure/{docker,kubernetes},scripts}

# Kong Configuration
echo "Creating initial configuration for Kong..."
cat > "$PROJECT_ROOT/config/kong/kong.conf" <<EOL
# Kong Configuration File
database = postgres
pg_host = 127.0.0.1
pg_user = kong
pg_password = your_password
pg_database = kong
EOL

# PostgreSQL Configuration
echo "Creating initial configuration for PostgreSQL..."
cat > "$PROJECT_ROOT/config/postgres/postgres.conf" <<EOL
# PostgreSQL Configuration
listen_addresses = '*'
port = 5432
max_connections = 100
EOL

# Aranya Configuration
echo "Creating initial configuration for Aranya..."
cat > "$PROJECT_ROOT/config/aranya/config.json" <<EOL
{
    "name": "CyberConnect-Aranya",
    "work_dir": "./out",
    "sync_addr": "0.0.0.0:4321",
    "pid_file": "./out/daemon.pid",
    "policies": [
        {
            "endpoint": "/data/*",
            "methods": ["GET", "POST"],
            "roles": ["admin", "user"],
            "ipRestrictions": ["0.0.0.0/0"]
        }
    ]
}
EOL

# FastAPI Initial Setup for Services
echo "Setting up FastAPI templates for services..."
for service in intelligence_exchange collaboration marketplace; do
  mkdir -p "$PROJECT_ROOT/services/$service"
  cat > "$PROJECT_ROOT/services/$service/main.py" <<EOL
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "$service service is up and running"}
EOL
done

# Virtual environment setup for Celery in each service
echo "Setting up virtual environments and configuring Celery for each service..."
for service in intelligence_exchange collaboration marketplace; do
  python3 -m venv "$PROJECT_ROOT/services/$service/venv"
  source "$PROJECT_ROOT/services/$service/venv/bin/activate"
  pip install celery[redis] fastapi uvicorn
  cat > "$PROJECT_ROOT/services/$service/celery_app.py" <<EOL
from celery import Celery

celery_app = Celery(
    "$service",
    broker="redis://localhost:6379/0",
    backend="redis://localhost:6379/0"
)

@celery_app.task
def example_task(data):
    return {"data_processed": data}
EOL

  cat >> "$PROJECT_ROOT/services/$service/main.py" <<EOL

from .celery_app import example_task

@app.get("/process-data")
async def process_data(data: str):
    task = example_task.delay(data)
    return {"task_id": task.id}
EOL
  deactivate
done

# Create Docker files for each service (optional for containerization)
echo "Creating Dockerfiles for each service..."
for service in intelligence_exchange collaboration marketplace; do
  cat > "$PROJECT_ROOT/infrastructure/docker/Dockerfile.$service" <<EOL
# Dockerfile for $service service
FROM python:3.9-slim
WORKDIR /app
COPY ./services/$service /app
RUN pip install fastapi uvicorn
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
EOL
done

# Create setup scripts for each component
echo "Creating component setup scripts in $PROJECT_ROOT/scripts/..."

# Kong Setup Script
cat > "$PROJECT_ROOT/scripts/setup_kong.sh" <<EOL
#!/bin/bash
echo "Setting up Kong..."
kong start -c "$PROJECT_ROOT/config/kong/kong.conf"
EOL

# PostgreSQL Setup Script
cat > "$PROJECT_ROOT/scripts/setup_postgres.sh" <<EOL
#!/bin/bash
echo "Starting PostgreSQL setup..."
sudo -i -u postgres psql <<EOF
CREATE USER kong WITH PASSWORD 'your_password';
ALTER ROLE kong SET client_encoding TO 'utf8';
ALTER ROLE kong SET default_transaction_isolation TO 'read committed';
ALTER ROLE kong SET timezone TO 'UTC';
CREATE DATABASE kong;
GRANT ALL PRIVILEGES ON DATABASE kong TO kong;
\q
EOF
sudo systemctl restart postgresql
EOL

# Aranya Setup Script
cat > "$PROJECT_ROOT/scripts/setup_aranya.sh" <<EOL
#!/bin/bash
echo "Setting up Aranya daemon..."
mkdir -p "$PROJECT_ROOT/config/aranya/out"
cargo build --release
"$PROJECT_ROOT/target/release/daemon" "$PROJECT_ROOT/config/aranya/config.json"
EOL

# FastAPI Services Setup Script
cat > "$PROJECT_ROOT/scripts/setup_fastapi.sh" <<EOL
#!/bin/bash
echo "Setting up FastAPI services..."
for service in intelligence_exchange collaboration marketplace; do
  echo "Starting \$service..."
  cd "$PROJECT_ROOT/services/\$service"
  source venv/bin/activate
  uvicorn main:app --host 0.0.0.0 --port 8000 &
  deactivate
done
EOL

# Celery Worker Start Script
cat > "$PROJECT_ROOT/scripts/start_celery_workers.sh" <<EOL
#!/bin/bash
for service in intelligence_exchange collaboration marketplace; do
  echo "Starting Celery worker for \$service..."
  source "$PROJECT_ROOT/services/\$service/venv/bin/activate"
  celery -A "$PROJECT_ROOT/services/\$service/celery_app" worker --loglevel=info &
  deactivate
done
EOL

# Make all scripts executable
chmod +x "$PROJECT_ROOT/scripts/"*.sh

# Additional Setup: Frontend and Development Tools

# Install React frontend
if [ ! -d "$PROJECT_ROOT/frontend/my-app" ]; then
    echo "Setting up React frontend..."
    mkdir -p "$PROJECT_ROOT/frontend"
    cd "$PROJECT_ROOT/frontend"
    npx create-react-app my-app
    cd "$PROJECT_ROOT"  # return to CyberConnect root
else
    echo "React frontend is already set up"
fi

# Install Visual Studio Code if not already installed
if ! command_exists code; then
    echo "Installing Visual Studio Code..."
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/
    sh -c 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
    rm -f packages.microsoft.gpg
    apt update
    apt install -y code
else
    echo "Visual Studio Code is already installed"
fi

# Create start_all_services.sh to start everything
echo "Creating start_all_services.sh to start all components..."
cat > "$PROJECT_ROOT/scripts/start_all_services.sh" <<EOL
#!/bin/bash

# Start PostgreSQL
echo "Starting PostgreSQL..."
sudo systemctl start postgresql

# Start Redis
echo "Starting Redis..."
sudo systemctl start redis-server

# Start Kong
echo "Starting Kong API Gateway..."
"$PROJECT_ROOT/scripts/setup_kong.sh"

# Start Aranya
echo "Starting Aranya daemon..."
"$PROJECT_ROOT/scripts/setup_aranya.sh"

# Start FastAPI services
echo "Starting FastAPI services..."
"$PROJECT_ROOT/scripts/setup_fastapi.sh"

# Start Celery workers
echo "Starting Celery workers for background tasks..."
"$PROJECT_ROOT/scripts/start_celery_workers.sh"

# Start React frontend
echo "Starting React frontend..."
cd "$PROJECT_ROOT/frontend/my-app"
npm start &

echo "All CyberConnect components have been started."
EOL

chmod +x "$PROJECT_ROOT/scripts/start_all_services.sh"

# Final Summary
echo "CyberConnect setup complete. Navigate to $PROJECT_ROOT/scripts to start individual components or run start_all_services.sh to launch all components together."
